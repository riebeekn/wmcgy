name: Elixir CI
# Define workflow that runs when changes are pushed to the
# `main` branch or pushed to a PR branch that targets the `main`
# branch.
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Sets the ENV `MIX_ENV` to `test` for running tests
env:
  MIX_ENV: test

permissions:
  contents: read

jobs:
  # Build the code
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      # Step: Setup Elixir + Erlang image as the base.
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "25.2.3"
          elixir-version: "1.14.3"

      # Step: Check out the code.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step: Define how to cache deps. Restores existing cache if present.
      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v3
        env:
          cache-name: cache-elixir-deps
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-

      # Step: Define how to cache the `_build` directory. After the first run,
      # this speeds up tests runs a lot. This includes not re-compiling our
      # project's downloaded deps every run.
      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v3
        env:
          cache-name: cache-compiled-build
        with:
          path: _build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-

      # Step: Download project dependencies. If unchanged, uses
      # the cached version.
      - name: Install dependencies
        run: mix deps.get

      # Step: Compile the project treating any warnings as errors.
      # Customize this step if a different behavior is desired.
      - name: Compiles without warnings
        run: mix compile --warnings-as-errors

  # Perform various auditing tasks such as checking formatting etc.
  audit:
    runs-on: ubuntu-latest
    needs: build
    name: Audit

    steps:
      # Step: Setup Elixir + Erlang image as the base.
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "25.2.3"
          elixir-version: "1.14.3"

      # Step: Check out the code.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step: Grab deps from cache (as the deps cache is populated in the "build" job)
      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v3
        env:
          cache-name: cache-elixir-deps
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-

      # Step: Grab the compiled build from the cache (as the build cache is populated in the "build" job)
      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v3
        env:
          cache-name: cache-compiled-build
        with:
          path: _build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-

      # Step: Check that the checked in code has already been formatted.
      # This step fails if something was found unformatted.
      - name: Check Formatting
        run: mix format --check-formatted
      # Step: Check for cycles, don't exceed 20
      - name: Check cycles
        run: mix xref graph --format cycles --fail-above 20
      # Step: Run Credo checks
      - name: Run Credo
        run: mix credo --strict
        # Step: Check for any packages with known security issues
      - name: Check for dependency security vulnerabilities
        run: mix deps.audit
      # Step: Check for any retired packages
      - name: Check for retired packages
        run: mix hex.audit
      # Step: Check for un-used packages
      - name: Check for un-used packages
        run: mix deps.unlock --check-unused
      # Step: Run dialyzer
      - name: Run Dialyzer
        run: MIX_ENV=dev mix dialyzer

  # Run the tests
  test:
    # Set up a Postgres DB service. By default, Phoenix applications
    # use Postgres. This creates a database for running tests.
    # Additional services can be defined here if required.
    services:
      db:
        image: postgres:12
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    needs: build
    name: Test

    steps:
      # Step: Setup Elixir + Erlang image as the base.
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "25.2.3"
          elixir-version: "1.14.3"

      # Step: Check out the code.
      - name: Checkout code
        uses: actions/checkout@v3

      # Step: Grab deps from cache (as the deps cache is populated in the "build" job)
      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v3
        env:
          cache-name: cache-elixir-deps
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-

      # Step: Grab the compiled build from the cache (as the build cache is populated in the "build" job)
      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v3
        env:
          cache-name: cache-compiled-build
        with:
          path: _build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-

      # Step: Execute the tests.
      - name: Run tests
        run: |
          mix ecto.create
          mix ecto.migrate
          mix coveralls

  # Deploy to Fly
  deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Deploy
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
